package printer

import (
	"errors"
	"testing"
)

func TestGetUTFLength(t *testing.T) {
	tests := []struct {
		input    []byte
		expected int
		err      error
	}{
		{[]byte("Hello, World!"), 13, nil},            // –ü—Ä–æ—Å—Ç–æ–π ASCII —Ç–µ–∫—Å—Ç
		{[]byte("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"), 13, nil},             // –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
		{[]byte("„Åì„Çì„Å´„Å°„ÅØ"), 5, nil},                     // –Ø–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
		{[]byte("üëãüåç"), 2, nil},                        // –≠–º–æ–¥–∑–∏
		{[]byte{0xff, 0xfe, 0xfd}, 0, ErrInvalidUTF8}, // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UTF-8
		{[]byte{0xe0, 0xa4}, 0, ErrInvalidUTF8},       // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UTF-8 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–π—Ç)
		{[]byte(""), 0, nil},                          // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
	}

	for _, test := range tests {
		t.Run(string(test.input), func(t *testing.T) {
			length, err := GetUTFLength(test.input)
			if length != test.expected || !errors.Is(err, test.err) {
				t.Errorf("expected (%d, %v), got (%d, %v)", test.expected, test.err, length, err)
			}
		})
	}
}
